#!/bin/bash

# ccnvr - スマートなnvr (Neovim Remote) ラッパー
# 優先順位:
# 1. tmuxの同一ペイン内かつ同一ディレクトリ
# 2. tmuxの同一セッション内かつ同一ディレクトリ  
# 3. 同一ディレクトリ内（任意のnvimインスタンス）

set -euo pipefail

CURRENT_DIR="$(pwd)"

# 実行中のnvimプロセスのソケットを取得
get_nvim_sockets() {
    # 実行中のnvimプロセスのPIDを取得
    local pids=$(pgrep -x nvim 2>/dev/null | paste -sd '|' -)
    [ -z "$pids" ] && return

    # serverlistから実行中のプロセスのソケットのみ取得
    nvr --serverlist 2>/dev/null | { grep -E "nvim\.(${pids})\." || true; }
}

# nvimが同一ディレクトリか確認
is_same_dir() {
    local cwd=$(timeout 1 nvr --servername "$1" --nostart --remote-expr "getcwd()" 2>/dev/null || echo "")
    [ "$cwd" = "$CURRENT_DIR" ]
}

# nvimのPIDを取得
get_nvim_pid() {
    timeout 1 nvr --servername "$1" --nostart --remote-expr "getpid()" 2>/dev/null || echo ""
}

# ファイルを開く
open_file() {
    nvr --servername "$1" "${@:2}"
    exit 0
}

# 同一ディレクトリのnvimを探す（優先順位3）
find_same_dir_nvim() {
    for socket in $(get_nvim_sockets); do
        [ -z "$socket" ] && continue
        is_same_dir "$socket" && open_file "$socket" "$@"
    done
}

# tmuxペインとセッションをチェック（優先順位1,2）
find_tmux_nvim() {
    local current_pane=$(tmux display-message -p '#{pane_pid}')
    local current_session=$(tmux display-message -p '#S')
    local session_match=""

    for socket in $(get_nvim_sockets); do
        [ -z "$socket" ] && continue
        is_same_dir "$socket" || continue

        local pid=$(get_nvim_pid "$socket")
        [ -z "$pid" ] && continue

        # 優先順位1: 同一ペイン（親子関係チェック）
        if pgrep -P "$current_pane" | grep -q "^${pid}$"; then
            open_file "$socket" "$@"
        fi

        # 優先順位2: 同一セッション候補を記録
        [[ "$socket" == *"$current_session"* ]] && session_match="$socket"
    done

    # 優先順位2: 同一セッション
    if [ -n "$session_match" ]; then
        open_file "$session_match" "$@"
    fi
}

# メイン処理
main() {
    # tmux環境なら優先順位1,2をチェック
    [ -n "${TMUX:-}" ] && find_tmux_nvim "$@"

    # 優先順位3: 同一ディレクトリのnvim
    find_same_dir_nvim "$@"

    echo "適切なnvimインスタンスが見つかりません" >&2
    exit 1
}

main "$@"